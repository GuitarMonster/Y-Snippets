{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"if": {
		"prefix": "if",
		"body": "if (${1:condition}) {\n\t${2:expression}\n}",
		"description": "Yurii"
	},
	"else": {
		"prefix": "else",
		"body": "else {\n\t${1:expression}\n}",
		"description": "Yurii"
	},
	"ifelse": {
		"prefix": "ifelse",
		"body": "if (${1:condition}) {\n\t${2:expression}\n} else {\n\t${3:expression}\n}",
		"description": "Yurii"
	},


	// Angular

  "module": {
    "prefix": "module",
    "body": [
      "import { NgModule } from '@angular/core';",
      "",
      "import { ${1:Name}Component } from './${2:name}.component';",
      "",
      "@NgModule({",
      "\timports: [],",
      "\texports: [],",
      "\tdeclarations: [${1:Name}Component],",
      "\tproviders: [],",
      "})",
      "export class ${1:Name}Module { }",
      "$0"
    ],
    "description": "Yurii",
  },
  "routingModule": {
    "prefix": "module-routing",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { Routes, RouterModule } from '@angular/router';",
      "",
      "import { ${1:Name}Component } from './${2:name}.component';",
      "",
      "const routes: Routes = [",
      "  { path: '${3:path}', component: ${1:Name}Component },",
      "];",
      "",
      "@NgModule({",
      "  imports: [RouterModule.forChild(routes)],",
      "  exports: [RouterModule],",
      "})",
      "export class ${1:Name}RoutingModule { }",
      "",
      "export const routedComponents = [${1:Name}Component];"
    ],
    "description": "Yurii",
  },
	"service": {
		"prefix": "service",
		"body": [
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable()",
      "export class ${1:Name}Service {",
      "$0",
      "\tconstructor() { }",
      "}"
		],
		"description": "Yurii"
	},
  "pipe": {
    "prefix": "pipe",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "",
      "@Pipe({",
      "\tname: '${1:selector-name}'",
      "})",
      "",
      "export class ${2:Name}Pipe implements PipeTransform {",
      "\ttransform(value: any, ...args: any[]): any {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Yurii"
  },
  "outputEvent": {
    "prefix": "output-event",
    "body": ["@Output() ${1:eventName} = new EventEmitter<${2:eventType}>();"],
    "description": "Yurii"
  },
  "canActivateGuard": {
    "prefix": "guard-can-activate",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';",
      "",
      "@Injectable()",
      "export class ${1:Name}Guard implements CanActivate {",
      "\tconstructor() { }",
      "",
      "\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ],
    "description": "Yurii",
  },
  "canActivateChildGuard": {
    "prefix": "guard-can-activate-child",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';",
      "",
      "@Injectable()",
      "export class ${1:Name}Guard implements CanActivateChild {",
      "\tconstructor() { }",
      "",
      "\tcanActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ],
    "description": "Yurii",
  },
  "canLoadGuard": {
    "prefix": "guard-can-load",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { CanLoad, Route } from '@angular/router';",
      "",
      "@Injectable()",
      "export class ${1:Name}Guard implements CanLoad {",
      "\tconstructor() { }",
      "",
      "\tcanLoad(route: Route) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ],
    "description": "Yurii",
  },
  "canDeactivateGuard": {
    "prefix": "guard-can-deactivate",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';",
      "import { Observable } from 'rxjs';",
      "",
      "import { ${1:ComponentName}Component } from './${2:filename}.component';",
      "",
      "// Consider using this interface for all CanDeactivate guards,",
      "// and have your components implement this interface, too.",
      "//",
      "//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {",
      "//",
      "// export interface CanComponentDeactivate {",
      "// canDeactivate: () => any;",
      "// }",
      "",
      "@Injectable()",
      "export class ${2:Name}Guard implements CanDeactivate<${1:ComponentName}Component> {",
      "\tcanDeactivate(",
      "\t\tcomponent: ${1:ComponentName}Component,",
      "\t\tcurrentRoute: ActivatedRouteSnapshot, ",
      "\t\tcurrentState: RouterStateSnapshot",
      "\t): Observable<boolean>|Promise<boolean>|boolean {",
      "\t\treturn false;$0",
      "\t}",
      "}"
    ],
    "description": "Yurii",
  },
}
